<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mybatis.mapper.AddBookMapper">

        <!-- 주소록 전체 셀렉(개인/공유 공용) -->
        <select id="addBookList" resultType="AddBookVO" parameterType="map">
                SELECT 
                        manage_id, 
                        manage_display_name, 
                        manage_hp, 
                        manage_email, 
                        NVL(a.manage_remark, ' ') AS manage_remark, 
                        manage_company_name,
                        manage_official_name, 
                        manage_dept_name, 
                        manage_starred,
                        A.MANAGE_ADD_BOOK_ID,
                        NVL(b.add_book_id, '0') AS add_book_id, 
                        NVL(b.add_book_title, ' ') AS add_book_title, 
                        NVL(b.share_add_book_yn, '0') AS share_add_book_yn, 
                        a.emp_id AS emp_id,
                        manage_emp_id
                FROM 
                        add_book_manage a
                LEFT OUTER JOIN 
                        add_book  b
                ON 
                        b.add_book_id IN (
                                        SELECT REGEXP_SUBSTR(A.MANAGE_ADD_BOOK_ID, '[^#]+', 1, LEVEL) AS ADD_BOOK_ID
                                        FROM dual
                                        CONNECT BY REGEXP_SUBSTR(A.MANAGE_ADD_BOOK_ID, '[^#]+', 1, LEVEL) IS NOT NULL
                                ) OR b.add_book_id IS NULL
                WHERE 
                        a.emp_id = #{empId}
                        and (a.emp_id = b.emp_id or b.emp_id is null)
                        <if test="add_book_id != null">
                                <choose>
                                        <otherwise>
                                        AND b.ADD_BOOK_ID like '%' || #{add_book_id} || '%'
                                        </otherwise>
                                </choose>
                        </if>
                ORDER BY 
                        manage_id ASC
        </select>
        <select id="manageAddBookIdList" resultType="AddBookVO" parameterType="map">
                SELECT 
                        A.MANAGE_ADD_BOOK_ID
                FROM 
                        add_book_manage a
                WHERE 
                        a.emp_id = #{empId}
                ORDER BY 
                        manage_id ASC
        </select>
        <select id="addBookStarred" resultType="AddBookVO" parameterType="map">
                SELECT 
                        a.manage_id AS manage_id, 
                        a.manage_display_name AS manage_display_name, 
                        a.manage_hp AS manage_hp,  
                        a.manage_email AS manage_email, 
                        NVL(a.manage_remark, ' ') AS manage_remark, 
                        a.manage_company_name AS manage_company_name,
                        a.manage_official_name AS manage_official_name, 
                        a.manage_dept_name AS manage_dept_name,  
                        a.manage_starred AS manage_starred,
                        A.MANAGE_ADD_BOOK_ID,
                        NVL(b.add_book_id, '0') AS add_book_id, 
                        NVL(b.add_book_title, ' ') AS add_book_title, 
                        NVL(b.share_add_book_yn, '0') AS share_add_book_yn, 
                        a.emp_id AS emp_id,
                        a.manage_emp_id AS manage_emp_id
                FROM 
                        add_book_manage a
                LEFT OUTER JOIN 
                        add_book  b 
                ON 
                        a.emp_id = b.emp_id
                        AND (b.add_book_id IN (
                                        SELECT REGEXP_SUBSTR(A.MANAGE_ADD_BOOK_ID, '[^#]+', 1, LEVEL) AS ADD_BOOK_ID
                                        FROM dual
                                        CONNECT BY REGEXP_SUBSTR(A.MANAGE_ADD_BOOK_ID, '[^#]+', 1, LEVEL) IS NOT NULL
                                ) OR b.add_book_id IS NULL)
                WHERE 
                        a.emp_id = #{empId}
                        AND manage_starred = '1'
                ORDER BY 
                        manage_id ASC
        </select>

        <select id="addBookShare" resultType="AddBookVO" parameterType="map">
                SELECT 
                        a.manage_id AS manage_id, 
                        a.manage_display_name AS manage_display_name, 
                        a.manage_hp AS manage_hp,  
                        a.manage_email AS manage_email, 
                        NVL(a.manage_remark, ' ') AS manage_remark, 
                        a.manage_company_name AS manage_company_name,
                        a.manage_official_name AS manage_official_name, 
                        a.manage_dept_name AS manage_dept_name,  
                        a.manage_starred AS manage_starred,
                        A.MANAGE_ADD_BOOK_ID,
                        NVL(b.add_book_id, '0') AS add_book_id, 
                        NVL(b.add_book_title, ' ') AS add_book_title, 
                        NVL(b.share_add_book_yn, '0') AS share_add_book_yn, 
                        a.emp_id AS emp_id,
                        s.manage_id AS share_manage_id,
                        s.emp_id AS share_emp_id,
                        s.add_book_id AS share_add_book_id,
                        a.manage_emp_id AS manage_emp_id
                FROM 
                        add_book_manage a
                LEFT OUTER JOIN
                        share_add_book s 
                ON 
                        a.manage_id = s.manage_id
                LEFT OUTER JOIN 
                        add_book  b 
                ON 
                        b.add_book_id = s.add_book_id
                WHERE 
                        s.emp_id = #{empId}
                        AND s.add_book_id = b.add_book_id
                        AND s.manage_id IS NOT NULL
                        <if test="add_book_id != null">
                                <choose>
                                        <otherwise>
                                        AND B.ADD_BOOK_ID like '%' || #{add_book_id} || '%'
                                        </otherwise>
                                </choose>
                        </if>
                ORDER BY 
                        manage_id ASC
        </select>

        <!-- 주소록 그룹 셀렉(주소록 생성시 필요) -->
        <select id="addBookGroupSelect" resultType="AddBookVO" parameterType="map">
                SELECT 
                        a.add_book_id,
                        a.add_book_title,
                        a.share_add_book_yn,
                        a.emp_id
                FROM 
                        add_book a
                WHERE 
                        a.emp_id = #{empId}
        </select>

        <select id="shareAddBookGroupSelect" resultType="AddBookVO" parameterType="map">
                SELECT 
                        a.add_book_id,
                        MAX(a.add_book_title) AS add_book_title,
                        MAX(a.share_add_book_yn) AS share_add_book_yn,
                        MAX(a.emp_id) AS emp_id,
                        MAX(b.emp_id) AS share_emp_id
                FROM 
                        add_book a
                INNER JOIN 
                        share_add_book b ON a.add_book_id = b.add_book_id 
                where b.emp_id = #{empId}
                GROUP BY 
                        a.add_book_id
        </select>

        <!-- 주소록 특정 검색 셀렉(개인/공유 공용) -->
        <select id="addBookSearch" resultType="AddBookVO" parameterType="map">
        SELECT 
                        manage_id, 
                        manage_display_name, 
                        manage_hp, 
                        manage_email, 
                        NVL(a.manage_remark, ' ') AS manage_remark, 
                        manage_company_name,
                        manage_official_name, 
                        manage_dept_name, 
                        manage_starred,
                        A.MANAGE_ADD_BOOK_ID,
                        NVL(b.add_book_id, '0') AS add_book_id, 
                        NVL(b.add_book_title, ' ') AS add_book_title, 
                        NVL(b.share_add_book_yn, '0') AS share_add_book_yn, 
                        a.emp_id AS emp_id,
                        manage_emp_id
                FROM 
                        add_book_manage a
                LEFT OUTER JOIN 
                        add_book  b
                ON 
                        a.emp_id = b.emp_id
                        AND NOT b.share_add_book_yn = '1'
                        AND (b.add_book_id IN (
                                        SELECT REGEXP_SUBSTR(A.MANAGE_ADD_BOOK_ID, '[^#]+', 1, LEVEL) AS ADD_BOOK_ID
                                        FROM dual
                                        CONNECT BY REGEXP_SUBSTR(A.MANAGE_ADD_BOOK_ID, '[^#]+', 1, LEVEL) IS NOT NULL
                                ) OR b.add_book_id IS NULL)
                WHERE 
                        a.emp_id = #{empId}
                <if test="selectSearch != null">
                        <choose>
                                <when test="selectSearch == 'manage_display_name'">
                                AND manage_display_name LIKE '%' || #{searchText} || '%'
                                </when>
                                <when test="selectSearch == 'manage_hp'">
                                AND manage_hp LIKE '%' || #{searchText} || '%'
                                </when>
                                <when test="selectSearch == 'manage_official_name'">
                                AND manage_official_name LIKE '%' || #{searchText} || '%'
                                </when>
                                <when test="selectSearch == 'manage_dept_name'">
                                AND manage_dept_name LIKE '%' || #{searchText} || '%'
                                </when>
                                <when test="selectSearch == 'all'">
                                AND (
                                        manage_display_name LIKE '%' || #{searchText} || '%' OR
                                        manage_hp LIKE '%' || #{searchText} || '%' OR
                                        manage_official_name LIKE '%' || #{searchText} || '%' OR
                                        manage_dept_name LIKE '%' || #{searchText} || '%'
                                )
                                </when>
                        </choose>
                </if>
                ORDER BY manage_id ASC
        </select>

        <select id="addBookSearchStarred" resultType="AddBookVO" parameterType="map">
        SELECT 
                        manage_id, 
                        manage_display_name, 
                        manage_hp, 
                        manage_email, 
                        NVL(a.manage_remark, ' ') AS manage_remark, 
                        manage_company_name,
                        manage_official_name, 
                        manage_dept_name, 
                        manage_starred,
                        A.MANAGE_ADD_BOOK_ID,
                        NVL(b.add_book_id, '0') AS add_book_id, 
                        NVL(b.add_book_title, ' ') AS add_book_title, 
                        NVL(b.share_add_book_yn, '0') AS share_add_book_yn, 
                        a.emp_id AS emp_id,
                        manage_emp_id
                FROM 
                        add_book_manage a
                LEFT OUTER JOIN 
                        add_book  b
                ON 
                        a.emp_id = b.emp_id
                        AND (b.add_book_id IN (
                                        SELECT REGEXP_SUBSTR(A.MANAGE_ADD_BOOK_ID, '[^#]+', 1, LEVEL) AS ADD_BOOK_ID
                                        FROM dual
                                        CONNECT BY REGEXP_SUBSTR(A.MANAGE_ADD_BOOK_ID, '[^#]+', 1, LEVEL) IS NOT NULL
                                ) OR b.add_book_id IS NULL)
                WHERE 
                        a.emp_id = #{empId}
                        AND manage_starred = '1'
                <if test="selectSearch != null">
                        <choose>
                                <when test="selectSearch == 'manage_display_name'">
                                AND manage_display_name LIKE '%' || #{searchText} || '%'
                                </when>
                                <when test="selectSearch == 'manage_hp'">
                                AND manage_hp LIKE '%' || #{searchText} || '%'
                                </when>
                                <when test="selectSearch == 'manage_official_name'">
                                AND manage_official_name LIKE '%' || #{searchText} || '%'
                                </when>
                                <when test="selectSearch == 'manage_dept_name'">
                                AND manage_dept_name LIKE '%' || #{searchText} || '%'
                                </when>
                                <when test="selectSearch == 'all'">
                                AND (
                                        manage_display_name LIKE '%' || #{searchText} || '%' OR
                                        manage_hp LIKE '%' || #{searchText} || '%' OR
                                        manage_official_name LIKE '%' || #{searchText} || '%' OR
                                        manage_dept_name LIKE '%' || #{searchText} || '%'
                                )
                                </when>
                        </choose>
                </if>
                ORDER BY manage_id ASC
        </select>

        <select id="addBookSearchShare" resultType="AddBookVO" parameterType="map"> <!-- 공유주소록  수정해야함 -->
        SELECT 
                        manage_id, 
                        manage_display_name, 
                        manage_hp, 
                        manage_email, 
                        NVL(a.manage_remark, ' ') AS manage_remark, 
                        manage_company_name,
                        manage_official_name, 
                        manage_dept_name, 
                        manage_starred,
                        A.MANAGE_ADD_BOOK_ID,
                        NVL(b.add_book_id, '0') AS add_book_id, 
                        NVL(b.add_book_title, ' ') AS add_book_title, 
                        NVL(b.share_add_book_yn, '0') AS share_add_book_yn, 
                        a.emp_id AS emp_id,
                        manage_emp_id
                FROM 
                        add_book_manage a
                LEFT OUTER JOIN 
                        add_book  b
                ON 
                        a.emp_id = b.emp_id
                        AND (b.add_book_id IN (
                                        SELECT REGEXP_SUBSTR(A.MANAGE_ADD_BOOK_ID, '[^#]+', 1, LEVEL) AS ADD_BOOK_ID
                                        FROM dual
                                        CONNECT BY REGEXP_SUBSTR(A.MANAGE_ADD_BOOK_ID, '[^#]+', 1, LEVEL) IS NOT NULL
                                ) OR b.add_book_id IS NULL)
                WHERE 
                        a.emp_id = #{empId}
                        AND manage_starred = '1'
                <if test="selectSearch != null">
                        <choose>
                                <when test="selectSearch == 'manage_display_name'">
                                AND manage_display_name LIKE '%' || #{searchText} || '%'
                                </when>
                                <when test="selectSearch == 'manage_hp'">
                                AND manage_hp LIKE '%' || #{searchText} || '%'
                                </when>
                                <when test="selectSearch == 'manage_official_name'">
                                AND manage_official_name LIKE '%' || #{searchText} || '%'
                                </when>
                                <when test="selectSearch == 'manage_dept_name'">
                                AND manage_dept_name LIKE '%' || #{searchText} || '%'
                                </when>
                                <when test="selectSearch == 'all'">
                                AND (
                                        manage_display_name LIKE '%' || #{searchText} || '%' OR
                                        manage_hp LIKE '%' || #{searchText} || '%' OR
                                        manage_official_name LIKE '%' || #{searchText} || '%' OR
                                        manage_dept_name LIKE '%' || #{searchText} || '%'
                                )
                                </when>
                        </choose>
                </if>
                ORDER BY manage_id ASC
        </select>

        <!-- 주소록 추가 -->
        <insert id="addBookInsert" parameterType="java.util.Map">
                INSERT INTO add_book_manage(manage_id, manage_display_name, manage_hp, manage_email, 
                                            manage_remark, manage_company_name,manage_official_name, manage_dept_name, 
                                            manage_starred,manage_add_book_id,emp_id,manage_emp_id)
                VALUES(add_book_manage_seq.nextval, #{manage_display_name}, #{manage_hp}
                        , #{manage_email},#{manage_remark}, #{manage_company_name},#{manage_official_name}, #{manage_dept_name}
                        , 0,#{manage_add_book_id},#{empId},#{manage_emp_id})
        </insert>

        <update id="addBookUpdate" parameterType="map">
                UPDATE add_book_manage
                SET 
                        manage_display_name = #{manage_display_name},
                        manage_hp = #{manage_hp},
                        manage_email = #{manage_email},
                        manage_remark = #{manage_remark},
                        manage_company_name = #{manage_company_name},
                        manage_official_name = #{manage_official_name},
                        manage_dept_name = #{manage_dept_name},
                        manage_add_book_id = #{manage_add_book_id},
                        manage_emp_id = #{manage_emp_id}
                WHERE emp_id = #{empId}
                and manage_id = #{manage_id}
        </update>
        <!-- 주소록 수정 -->
        <select id="addBookListUpdate" resultType="map" parameterType="map">
                SELECT 
                        manage_id, 
                        manage_display_name, 
                        manage_hp, 
                        manage_email, 
                        NVL(a.manage_remark, ' ') AS manage_remark, 
                        manage_company_name,
                        manage_official_name, 
                        manage_dept_name, 
                        manage_starred,
                        A.MANAGE_ADD_BOOK_ID,
                        NVL(b.add_book_id, '0') AS add_book_id, 
                        NVL(b.add_book_title, ' ') AS add_book_title, 
                        NVL(b.share_add_book_yn, '0') AS share_add_book_yn, 
                        a.emp_id AS emp_id
                FROM 
                        add_book_manage a
                LEFT OUTER JOIN 
                        add_book  b
                ON 
                        a.emp_id = b.emp_id
                        AND (b.add_book_id IN (
                                        SELECT REGEXP_SUBSTR(A.MANAGE_ADD_BOOK_ID, '[^#]+', 1, LEVEL) AS ADD_BOOK_ID
                                        FROM dual
                                        CONNECT BY REGEXP_SUBSTR(A.MANAGE_ADD_BOOK_ID, '[^#]+', 1, LEVEL) IS NOT NULL
                                ) OR b.add_book_id IS NULL)
                WHERE 
                        a.emp_id = #{empId}
                        AND a.manage_id = #{manage_id}
                ORDER BY 
                        manage_id ASC
        </select>
        

        <!-- 주소록 그룹 추가(개인) -->
        <insert id="addBookGroupInsert" parameterType="java.util.Map">
                INSERT INTO add_book(add_book_id, add_book_title,share_add_book_yn,emp_id)
                VALUES(add_book_seq.nextval, #{insert_add_book_title}, 0, #{empId})
        </insert>


        <!-- 주소록 그룹 수정(개인/공유 공용) -->
        <update id="addBookGroupUpdate" parameterType="map">
                UPDATE add_book
                SET 
                        add_book_title = #{update_add_book_title}
                WHERE emp_id = #{empId}
                and add_book_id = #{add_book_id}
        </update>

        <select id="addBookGroupDoubleCheck" resultType="map" parameterType="map">
                SELECT COUNT(*) AS count
                FROM add_book
                WHERE add_book_title = #{add_book_title} 
                AND emp_id = ${empId} 
        </select>

        <update id="addBookStarredUpdate" parameterType="map">
                UPDATE add_book_manage
                SET 
                        manage_starred = #{manage_starred}
                WHERE emp_id = #{empId}
                and manage_id = #{manage_id}
        </update>

        <insert id="addBookStarredInsert" parameterType="java.util.Map">
                INSERT INTO add_book_favorites(manage_id,emp_id)
                VALUES(#{manage_id}, #{empId})
        </insert>

        <delete id="addBookStarredDelete" parameterType="map">
                DELETE FROM add_book_favorites
                WHERE manage_id = #{manage_id}
                AND emp_id = #{empId}
        </delete>

        <delete id="addBookGroupDelete" parameterType="map">
                DELETE FROM add_book
                WHERE add_book_id = #{add_book_id}
                AND emp_id = #{empId}
        </delete>

        <delete id="shareAddBookGroupDelete" parameterType="map">
                DELETE FROM share_add_book
                WHERE add_book_id = #{add_book_id}
                AND emp_id = #{empId}
        </delete>

        <!-- 주소록 삭제 -->
        <delete id="addBookDelete" parameterType="java.util.List">
                DELETE FROM add_book_manage
                WHERE manage_id IN
                <foreach collection="list" item="item" open="(" separator="," close=")">
                #{item}
                </foreach>
        </delete>

        <insert id="addBookShareInsert" parameterType="java.util.Map">
                INSERT INTO share_add_book (emp_id, manage_id,add_book_id)
                SELECT #{emp_id},a.manage_id,#{add_book_id}              
                FROM add_book_manage a 
                LEFT OUTER JOIN add_book b ON a.emp_id = b.emp_id
                WHERE (b.add_book_id IN (
                                SELECT REGEXP_SUBSTR(A.MANAGE_ADD_BOOK_ID, '[^#]+', 1, LEVEL) AS ADD_BOOK_ID
                                FROM dual
                                CONNECT BY REGEXP_SUBSTR(A.MANAGE_ADD_BOOK_ID, '[^#]+', 1, LEVEL) IS NOT NULL
                        ) OR b.add_book_id IS NULL)
                AND a.emp_id = #{empId}
                AND b.add_book_id = #{add_book_id}
        </insert>

        <update id="addBookShareManageUpdate" parameterType="map">
                UPDATE add_book_manage
                SET share_add_book_manage_yn = '1'
                WHERE manage_id IN (
                SELECT a.manage_id               
                FROM add_book_manage a 
                LEFT OUTER JOIN add_book b ON a.emp_id = b.emp_id
                WHERE (b.add_book_id IN (
                                SELECT REGEXP_SUBSTR(A.MANAGE_ADD_BOOK_ID, '[^#]+', 1, LEVEL) AS ADD_BOOK_ID
                                FROM dual
                                CONNECT BY REGEXP_SUBSTR(A.MANAGE_ADD_BOOK_ID, '[^#]+', 1, LEVEL) IS NOT NULL
                        ) OR b.add_book_id IS NULL)
                AND a.emp_id = #{empId}
                AND b.add_book_id = #{add_book_id}
                )
        </update>

        <update id="addBookShareInsertUpdate" parameterType="map">
                UPDATE add_book
                SET 
                        share_add_book_yn = '1'
                WHERE 
                        add_book_id = #{add_book_id}
        </update>

      
        <insert id="messageInsert" parameterType="java.util.Map" useGeneratedKeys="true" keyProperty="id">
                <selectKey keyProperty="id" resultType="Long" order="BEFORE">
                        SELECT message_seq.nextval FROM dual
                </selectKey>
                INSERT INTO message(message_id, emp_id,message_content,message_start_dt, message_delete, message_title)
                VALUES(#{id}, #{empId} ,#{messageContent},TO_DATE(TO_CHAR(SYSDATE, 'YYYY-MM-DD'), 'YYYY-MM-DD') , 0,#{message_title})
        </insert>

        <insert id="receivermessageInsert" parameterType="java.util.Map">
                INSERT INTO receiver_message(message_id, emp_id,receiver_read, receiver_delete)
                VALUES(#{sequenceKey},#{manage_emp_id}, 0, 0)
        </insert>

        <select id="messageList" resultType="AddBookVO" parameterType="map">
                SELECT 
                        a.message_id,
                        b.emp_id,
                        TO_CHAR(a.message_start_dt, 'YYYY-MM-DD') AS message_start_dt,
                        b.receiver_read,
                        c.emp_name,
                        message_content,
                        message_title
                FROM
                        MESSAGE a
                LEFT OUTER JOIN
                        RECEIVER_MESSAGE b
                ON
                        a.message_id = b.message_id
                LEFT OUTER JOIN
                        EMP c
                ON
                        b.emp_id = c.emp_id
                WHERE a.emp_id=#{empId}
                and message_delete = 0
                ORDER BY 
                        message_start_dt DESC
        </select>
        <select id="messageDetail" resultType="AddBookVO" parameterType="map">
                SELECT 
                        a.message_id,
                        b.emp_id,
                        TO_CHAR(a.message_start_dt, 'YYYY-MM-DD') AS message_start_dt,
                        b.receiver_read,
                        c.emp_name,
                        message_content,
                        message_title
                FROM
                        MESSAGE a
                LEFT OUTER JOIN
                        RECEIVER_MESSAGE b
                ON
                        a.message_id = b.message_id
                LEFT OUTER JOIN
                        EMP c
                ON
                        b.emp_id = c.emp_id
                WHERE a.emp_id=#{empId}
                and a.message_id = #{message_id}
                and b.emp_id = #{message_emp_id}
                and message_delete = 0
        </select>

        <update id="messageDelete" parameterType="java.util.List">
                UPDATE message
                SET 
                        message_delete = '1'
                WHERE 
                        message_id IN
                <foreach collection="list" item="item" open="(" separator="," close=")">
                #{item}
                </foreach>
        </update>
        <update id="receivermessageDelete" parameterType="java.util.List">
                UPDATE receiver_message
                SET 
                        receiver_delete = '1'
                WHERE 
                        message_id IN
                <foreach collection="list" item="item" open="(" separator="," close=")">
                #{item}
                </foreach>
        </update>

        <select id="receiverList" resultType="AddBookVO" parameterType="map">
                SELECT 
                        a.message_id,
                        a.emp_id,
                        TO_CHAR(a.message_start_dt, 'YYYY-MM-DD') AS message_start_dt,
                        b.receiver_read,
                        c.emp_name,
                        message_content,
                        message_title
                FROM
                        MESSAGE a
                LEFT OUTER JOIN
                        RECEIVER_MESSAGE b
                ON
                        a.message_id = b.message_id
                LEFT OUTER JOIN
                        EMP c
                ON
                        a.emp_id = c.emp_id
                WHERE b.emp_id=#{empId}
                and message_delete = 0
                and receiver_delete = 0
                ORDER BY 
                        message_start_dt DESC
        </select>

        <select id="receiverDetail" resultType="AddBookVO" parameterType="map">
                SELECT 
                        a.message_id,
                        a.emp_id,
                        TO_CHAR(a.message_start_dt, 'YYYY-MM-DD') AS message_start_dt,
                        b.receiver_read,
                        c.emp_name,
                        message_content,
                        message_title
                FROM
                        MESSAGE a
                LEFT OUTER JOIN
                        RECEIVER_MESSAGE b
                ON
                        a.message_id = b.message_id
                LEFT OUTER JOIN
                        EMP c
                ON
                        a.emp_id = c.emp_id
                WHERE b.emp_id=#{empId}
                and a.message_id = #{message_id}
                and a.emp_id = #{message_emp_id}
                and message_delete = 0
                and receiver_delete = 0
        </select>

        <update id="receiverRead" parameterType="map">
                UPDATE receiver_message
                SET 
                        receiver_read = '1'
                WHERE 
                        message_id = #{message_id}
        </update>
</mapper>